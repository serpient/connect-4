{"version":3,"sources":["UserEnum.js","components/Board.jsx","utilities/boardPlay.js","App.js","serviceWorker.js","index.js"],"names":["User","EMPTY","HUMAN","COMPUTER","Board","_ref","boardData","boardPlay","react_default","a","createElement","className","map","row","rowIdx","coinInColumn","columnIdx","coin","Fragment","key","onClick","concat","generateBoard","boardMap","push","column","checkRowForMatchingCoins","board","currentPlayer","some","coinsForPlayer","coinPosition","coinIdx","length","object","are4CoinsAdjacent","array","currentPosition","distanceTracker","i","distance","hasOwnProperty","calculateDistance","generateBoardByColumn","columnFirstBoard","generateBoardByDiagonal","diagonalBoard","forEach","diagonal","diagonalIdx","beginRow","beginColumn","endRow","endColumn","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resetGame","setState","gameMessage","defaultMessage","playWinAnimation","togglePlayer","newPlayer","state","_this$state","addCoinToBoard","checkForTie","tieMessage","checkBoard","winMessage","emptyCoins","_this$state2","columnIsFullMessage","checkWinByRow","checkWinByColumn","columnBoard","checkWinByDiagonals","_this2","_this$state3","player","currentPlayerDescription","App_WinAnimation","src_components_Board","type","Component","WinAnimation","playerDescription","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5232f804.chunk.js","sourcesContent":["const User = {\r\n  EMPTY: 0,\r\n  HUMAN: 1,\r\n  COMPUTER: 2,\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport User from '../UserEnum';\r\nimport './Board.scss';\r\n\r\nconst Board = ({ boardData, boardPlay}) => {\r\n  const renderBoardSpaces = (array) => {\r\n    return array.map((row, rowIdx) => {\r\n      return row.map((coinInColumn, columnIdx) => {\r\n        let coin = null;\r\n        if (coinInColumn === User.COMPUTER) {\r\n          coin = (\r\n            <>\r\n              <div className='coin--computer' />\r\n              <div className='coin--computer-border' />\r\n            </>\r\n          )\r\n        } else if (coinInColumn === User.HUMAN) {\r\n          coin = (\r\n            <>\r\n              <div className='coin--human' />\r\n              <div className='coin--human-border' />\r\n            </>\r\n          )\r\n        }\r\n        return (\r\n          <div \r\n            className='coin' \r\n            key={rowIdx + ',' + columnIdx} \r\n            onClick={() => boardPlay(rowIdx, columnIdx)}\r\n          >\r\n            <div className='coin-position'>{`[${rowIdx}, ${columnIdx}]`} </div>\r\n            {coin}\r\n          </div>\r\n        )\r\n      })\r\n    })\r\n  }\r\n\r\n  return (\r\n    <section className='board-container'>\r\n      <div className='board-spaces'>\r\n        {renderBoardSpaces(boardData)}\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Board;","import User from '../UserEnum';\r\n\r\nexport const generateBoard = () => {\r\n  let boardMap = [];\r\n  for (var row = 0; row < 6; row++) {\r\n    boardMap.push([]);\r\n    for (var column = 0; column < 7; column++) {\r\n      boardMap[row].push(User.EMPTY);\r\n    }\r\n  }\r\n  return boardMap;\r\n}\r\n\r\nexport const calculateDistance = (array) => {\r\n  let currentPosition;\r\n  let distanceTracker = {};\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (!currentPosition) {\r\n      currentPosition = array[i];\r\n      i++;\r\n    }\r\n    let distance = (array[i] - currentPosition);\r\n    // resets object if after non-matching 1s, \r\n    if (distanceTracker[1] && distance !== 1) {\r\n      distanceTracker = {};\r\n    }\r\n    distanceTracker[distance] = (\r\n      distanceTracker.hasOwnProperty(distance) \r\n        ? distanceTracker[distance] + 1 \r\n        : 1\r\n    );\r\n    currentPosition = array[i];\r\n  }\r\n  return distanceTracker;\r\n}\r\n\r\nexport const are4CoinsAdjacent = (object) => {\r\n  for (let key in object) {\r\n    if ((key == 0 || key == 1) && object[key] >= 3) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport const checkRowForMatchingCoins = (board, currentPlayer) => {\r\n  return board.some((row, rowIdx) => {\r\n    let coinsForPlayer = [];\r\n    return row.some((coinPosition, coinIdx) => {\r\n      if (coinPosition === currentPlayer) {\r\n        coinsForPlayer.push(coinIdx);\r\n      }\r\n      if (coinsForPlayer.length >= 4 && coinIdx === row.length - 1) {\r\n        let distances = calculateDistance(coinsForPlayer);\r\n        return are4CoinsAdjacent(distances);\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\nexport const generateBoardByColumn = (board) => {\r\n  let columnFirstBoard = [];\r\n    for (var column = 0; column < 7; column++) {\r\n      columnFirstBoard.push([]) // new column\r\n      for (var row = 0; row < 6; row++ ) {\r\n        columnFirstBoard[column].push(board[row][column])\r\n      }\r\n    }\r\n    return columnFirstBoard;\r\n}\r\n\r\nexport const generateBoardByDiagonal = (board) => {\r\n  let diagonalsToCheck = [\r\n    [[3,0], [0,3]],\r\n    [[4,0], [0,4]],\r\n    [[5,0], [0,5]],\r\n    [[5,1], [0,6]],\r\n    [[5,2], [1,6]],\r\n    [[5,3], [2,6]],\r\n\r\n    [[5,3], [2,0]],\r\n    [[5,4], [1,0]],\r\n    [[5,5], [0,0]],\r\n    [[5,6], [0,1]],\r\n    [[4,6], [0,2]],\r\n    [[3,6], [0,3]],\r\n  ];\r\n  let diagonalBoard = [];\r\n  diagonalsToCheck.forEach((diagonal, diagonalIdx) => {\r\n    diagonalBoard.push([]);\r\n    let beginRow = diagonal[0][0];\r\n    let beginColumn = diagonal[0][1];\r\n    let endRow = diagonal[1][0];\r\n    let endColumn = diagonal[1][1];\r\n    for (var i = 0; i < beginRow - endRow + 1; i++) {\r\n      let column = endColumn - beginColumn > 0 ? beginColumn + i : beginColumn - i;\r\n      diagonalBoard[diagonalIdx].push(board[beginRow - i][column])\r\n    }\r\n  })\r\n  return diagonalBoard;\r\n}","import React, { Component } from 'react';\r\nimport Board from './components/Board';\r\nimport './App.scss';\r\nimport User from './UserEnum';\r\nimport { \r\n  generateBoard, \r\n  checkRowForMatchingCoins,\r\n  generateBoardByColumn,\r\n  generateBoardByDiagonal,\r\n} from './utilities/boardPlay';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.defaultMessage = `Please select a coin spot`;\r\n    this.columnIsFullMessage = 'Please select another column';\r\n    this.winMessage = 'You have won';\r\n    this.tieMessage = 'This game is a tie';\r\n    this.state = {\r\n      boardData: generateBoard(),\r\n      currentPlayer: User.HUMAN,\r\n      gameMessage: `Please select a coin spot`,\r\n      playWinAnimation: false,\r\n    }\r\n  }\r\n\r\n  resetGame = () => {\r\n    this.setState({ \r\n      boardData: generateBoard(), \r\n      gameMessage: this.defaultMessage,\r\n      currentPlayer: User.HUMAN,\r\n      playWinAnimation: false,\r\n    });\r\n  }\r\n\r\n  togglePlayer = () => {\r\n    let { currentPlayer } = this.state;\r\n    let newPlayer = currentPlayer === User.HUMAN ? User.COMPUTER : User.HUMAN;\r\n    this.setState({ currentPlayer: newPlayer });\r\n  }\r\n\r\n  boardPlay = (rowIdx, columnIdx) => {\r\n    let { boardData, currentPlayer } = this.state;\r\n\r\n    let successfulCoinDrop = this.addCoinToBoard(columnIdx);\r\n    if (!successfulCoinDrop) {\r\n      return;\r\n    }\r\n\r\n    if (this.checkForTie(boardData)) {\r\n      return this.setState({ gameMessage: this.tieMessage });\r\n    }\r\n\r\n    if (this.checkBoard(boardData, currentPlayer)) {\r\n      this.setState({ \r\n        gameMessage: this.winMessage,\r\n        playWinAnimation: true, \r\n      })\r\n    } else {\r\n      return this.togglePlayer();\r\n    }\r\n  }\r\n\r\n  checkForTie = (boardData) => {\r\n    let emptyCoins = [];\r\n    boardData.forEach((row) => {\r\n      row.forEach((coin) => {\r\n        if (coin === User.EMPTY) {\r\n          emptyCoins.push(coin);\r\n        }\r\n      })\r\n    }) \r\n    return emptyCoins.length === 0;\r\n  }\r\n\r\n  addCoinToBoard = (columnIdx) => {\r\n    let { boardData, currentPlayer } = this.state;\r\n    this.setState({ gameMessage: this.defaultMessage });\r\n    for (var row = 5; row >= 0; row--) {\r\n      if (row === 0 && boardData[row][columnIdx] !== User.EMPTY) {\r\n        // if no empty spots, tell user to select another column\r\n        this.setState({ gameMessage: this.columnIsFullMessage });\r\n        return false;\r\n      } else if (boardData[row][columnIdx] === User.EMPTY) {\r\n        boardData[row][columnIdx] = currentPlayer;\r\n        return true;\r\n      } \r\n    }\r\n  }\r\n\r\n  checkWinByRow = (board, currentPlayer) => {\r\n    return checkRowForMatchingCoins(board, currentPlayer);\r\n  }\r\n\r\n  checkWinByColumn = (board, currentPlayer) => {\r\n    let columnBoard = generateBoardByColumn(board);\r\n    return this.checkWinByRow(columnBoard, currentPlayer);\r\n  }\r\n\r\n  checkWinByDiagonals = (board, currentPlayer) => {\r\n    let diagonalBoard = generateBoardByDiagonal(board);\r\n    return this.checkWinByRow(diagonalBoard, currentPlayer);\r\n  }\r\n\r\n  checkBoard = (board, currentPlayer) => {\r\n    let row = this.checkWinByRow(board, currentPlayer);\r\n    let column = this.checkWinByColumn(board, currentPlayer);\r\n    let diagonal = this.checkWinByDiagonals(board, currentPlayer);\r\n    return row || column || diagonal;\r\n  }\r\n\r\n  render() {\r\n    let { boardData, gameMessage, currentPlayer,playWinAnimation } = this.state;\r\n    let player = currentPlayer === User.HUMAN ? 'human' : 'computer';\r\n    let currentPlayerDescription = currentPlayer === User.HUMAN ? 'Player 1' : 'Player 2';\r\n    return (\r\n      <div className=\"App\">\r\n        { playWinAnimation \r\n          ? <WinAnimation currentPlayer={currentPlayer} />\r\n          : <h1 className={`game-message player--${player}`}>\r\n              {`${currentPlayerDescription}, ${gameMessage}.`}\r\n            </h1>\r\n        }\r\n        <Board boardPlay={this.boardPlay} boardData={boardData} />\r\n        <button\r\n          type='button'\r\n          className='reset-btn'\r\n          onClick={() => this.resetGame()}\r\n        >\r\n          Reset Game\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst WinAnimation = ({currentPlayer}) => {\r\n  let player = currentPlayer === User.HUMAN ? 'human' : 'computer';\r\n  let playerDescription = currentPlayer === User.HUMAN ? 'Player 1' : 'Player 2';\r\n  return (\r\n    <div className='game-win'>\r\n      <div className={`coin--${player}`} />\r\n      <div className={`coin--${player}-border`} />\r\n      <div className={`game-win--text game-message player--${player}`}>\r\n        {playerDescription} Wins!\r\n      </div>\r\n    </div> \r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}