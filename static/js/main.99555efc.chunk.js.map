{"version":3,"sources":["UserEnum.js","components/Board.jsx","utilities/boardPlay.js","App.js","serviceWorker.js","index.js"],"names":["User","EMPTY","HUMAN","COMPUTER","Board","_ref","boardData","boardPlay","react_default","a","createElement","className","map","row","rowIdx","coinInColumn","columnIdx","coin","Fragment","key","onClick","concat","generateBoard","boardMap","push","column","checkRowForMatchingCoins","board","currentPlayer","isAWin","forEach","coinsForPlayer","coinPosition","coinIdx","length","distanceObj","array","currentPosition","distanceTracker","i","distance","hasOwnProperty","calculateDistance","object","are4CoinsAdjacent","generateBoardByColumn","columnFirstBoard","generateBoardByDiagonal","diagonalBoard","diagonal","diagonalIdx","beginRow","beginColumn","endRow","endColumn","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resetGame","setState","gameMessage","defaultMessage","playWinAnimation","togglePlayer","newPlayer","state","_this$state","addCoinToBoard","checkForTie","tieMessage","checkBoard","winMessage","setTimeout","emptyCoins","_this$state2","columnIsFullMessage","checkWinByRow","checkWinByColumn","columnBoard","checkWinByDiagonals","console","log","_this2","_this$state3","player","currentPlayerDescription","App_WinAnimation","src_components_Board","type","Component","WinAnimation","playerDescription","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99555efc.chunk.js","sourcesContent":["const User = {\r\n  EMPTY: 0,\r\n  HUMAN: 1,\r\n  COMPUTER: 2,\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport User from '../UserEnum';\r\nimport './Board.scss';\r\n\r\nconst Board = ({ boardData, boardPlay}) => {\r\n  const renderBoardSpaces = (array) => {\r\n    return array.map((row, rowIdx) => {\r\n      return row.map((coinInColumn, columnIdx) => {\r\n        let coin = null;\r\n        if (coinInColumn === User.COMPUTER) {\r\n          coin = (\r\n            <>\r\n              <div className='coin--computer' />\r\n              <div className='coin--computer-border' />\r\n            </>\r\n          )\r\n        } else if (coinInColumn === User.HUMAN) {\r\n          coin = (\r\n            <>\r\n              <div className='coin--human' />\r\n              <div className='coin--human-border' />\r\n            </>\r\n          )\r\n        }\r\n        return (\r\n          <div \r\n            className='coin' \r\n            key={rowIdx + ',' + columnIdx} \r\n            onClick={() => boardPlay(rowIdx, columnIdx)}\r\n          >\r\n            <div className='coin-position'>{`[${rowIdx}, ${columnIdx}]`} </div>\r\n            {coin}\r\n          </div>\r\n        )\r\n      })\r\n    })\r\n  }\r\n\r\n  return (\r\n    <section className='board-container'>\r\n      <div className='board-spaces'>\r\n        {renderBoardSpaces(boardData)}\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Board;","import User from '../UserEnum';\r\n\r\nexport const generateBoard = () => {\r\n  let boardMap = [];\r\n  for (var row = 0; row < 6; row++) {\r\n    boardMap.push([]);\r\n    for (var column = 0; column < 7; column++) {\r\n      boardMap[row].push(User.EMPTY);\r\n    }\r\n  }\r\n  return boardMap;\r\n}\r\n\r\nexport const calculateDistance = (array) => {\r\n  let currentPosition;\r\n  let distanceTracker = {};\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (!currentPosition) {\r\n      currentPosition = array[i];\r\n      i++;\r\n    }\r\n    let distance = (array[i] - currentPosition);\r\n    distanceTracker[distance] = (\r\n      distanceTracker.hasOwnProperty(distance) \r\n        ? distanceTracker[distance] + 1 \r\n        : 1\r\n    );\r\n    currentPosition = array[i];\r\n  }\r\n  return distanceTracker;\r\n}\r\n\r\nexport const are4CoinsAdjacent = (object) => {\r\n  for (let key in object) {\r\n    if ((key == 0 || key == 1) && object[key] >= 3) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport const checkRowForMatchingCoins = (board, currentPlayer) => {\r\n  let isAWin = false;\r\n  board.forEach((row, rowIdx) => {\r\n    let coinsForPlayer = [];\r\n    row.forEach((coinPosition, coinIdx) => {\r\n      if (coinPosition === currentPlayer) {\r\n        coinsForPlayer.push(coinIdx);\r\n      }\r\n      if (coinsForPlayer.length >= 4 && coinIdx === row.length - 1) {\r\n        let distanceObj = calculateDistance(coinsForPlayer);\r\n        isAWin = are4CoinsAdjacent(distanceObj);\r\n      }\r\n    })\r\n  })\r\n  return isAWin;\r\n}\r\n\r\nexport const generateBoardByColumn = (board) => {\r\n  let columnFirstBoard = [];\r\n    for (var column = 0; column < 7; column++) {\r\n      columnFirstBoard.push([]) // new column\r\n      for (var row = 0; row < 6; row++ ) {\r\n        columnFirstBoard[column].push(board[row][column])\r\n      }\r\n    }\r\n    return columnFirstBoard;\r\n}\r\n\r\nexport const generateBoardByDiagonal = (board) => {\r\n  let diagonalsToCheck = [\r\n    [[3,0], [0,3]],\r\n    [[4,0], [0,4]],\r\n    [[5,0], [0,5]],\r\n    [[5,1], [0,6]],\r\n    [[5,2], [1,6]],\r\n    [[5,3], [2,6]],\r\n\r\n    [[5,3], [2,0]],\r\n    [[5,4], [1,0]],\r\n    [[5,5], [0,0]],\r\n    [[5,6], [0,1]],\r\n    [[4,6], [0,2]],\r\n    [[3,6], [0,3]],\r\n  ];\r\n  let diagonalBoard = [];\r\n  diagonalsToCheck.forEach((diagonal, diagonalIdx) => {\r\n    diagonalBoard.push([]);\r\n    let beginRow = diagonal[0][0];\r\n    let beginColumn = diagonal[0][1];\r\n    let endRow = diagonal[1][0];\r\n    let endColumn = diagonal[1][1];\r\n    for (var i = 0; i < beginRow - endRow + 1; i++) {\r\n      let column = endColumn - beginColumn > 0 ? beginColumn + i : beginColumn - i;\r\n      diagonalBoard[diagonalIdx].push(board[beginRow - i][column])\r\n    }\r\n  })\r\n  return diagonalBoard;\r\n}","import React, { Component } from 'react';\nimport Board from './components/Board';\nimport './App.scss';\nimport User from './UserEnum';\nimport { \n  generateBoard, \n  checkRowForMatchingCoins,\n  generateBoardByColumn,\n  generateBoardByDiagonal,\n} from './utilities/boardPlay';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.defaultMessage = `Please select a coin spot`;\n    this.columnIsFullMessage = 'Please select another column';\n    this.winMessage = 'You have won';\n    this.tieMessage = 'This game is a tie';\n    this.state = {\n      boardData: generateBoard(),\n      currentPlayer: User.HUMAN,\n      gameMessage: `Please select a coin spot`,\n      playWinAnimation: false,\n    }\n  }\n\n  resetGame = () => {\n    this.setState({ \n      boardData: generateBoard(), \n      gameMessage: this.defaultMessage,\n      currentPlayer: User.HUMAN,\n      playWinAnimation: false,\n    });\n  }\n\n  togglePlayer = () => {\n    let { currentPlayer } = this.state;\n    let newPlayer = currentPlayer === User.HUMAN ? User.COMPUTER : User.HUMAN;\n    this.setState({ currentPlayer: newPlayer });\n  }\n\n  boardPlay = (rowIdx, columnIdx) => {\n    let { boardData, currentPlayer } = this.state;\n\n    let successfulCoinDrop = this.addCoinToBoard(columnIdx);\n    if (!successfulCoinDrop) {\n      return;\n    }\n\n    if (this.checkForTie(boardData)) {\n      return this.setState({ gameMessage: this.tieMessage });\n    }\n\n    if (this.checkBoard(boardData, currentPlayer)) {\n      this.setState({ \n        gameMessage: this.winMessage,\n        playWinAnimation: true, \n      })\n    } else {\n      setTimeout(() => { this.togglePlayer() }, 300)\n    }\n  }\n\n  checkForTie = (boardData) => {\n    let emptyCoins = [];\n    boardData.forEach((row, rowIdx) => {\n      row.forEach((coin, coinIdx) => {\n        if (coin === User.EMPTY) {\n          emptyCoins.push(coin);\n        }\n      })\n    }) \n    return emptyCoins.length === 0;\n  }\n\n  addCoinToBoard = (columnIdx) => {\n    let { boardData, currentPlayer } = this.state;\n    this.setState({ gameMessage: this.defaultMessage });\n    for (var row = 5; row >= 0; row--) {\n      if (row === 0 && boardData[row][columnIdx] !== User.EMPTY) {\n        // if no empty spots, tell user to select another column\n        this.setState({ gameMessage: this.columnIsFullMessage });\n        return false;\n      } else if (boardData[row][columnIdx] === User.EMPTY) {\n        boardData[row][columnIdx] = currentPlayer;\n        return true;\n      } \n    }\n  }\n\n  checkWinByRow = (board, currentPlayer) => {\n    return checkRowForMatchingCoins(board, currentPlayer);\n  }\n\n  checkWinByColumn = (board, currentPlayer) => {\n    let columnBoard = generateBoardByColumn(board);\n    return this.checkWinByRow(columnBoard, currentPlayer);\n  }\n\n  checkWinByDiagonals = (board, currentPlayer) => {\n    let diagonalBoard = generateBoardByDiagonal(board);\n    return this.checkWinByRow(diagonalBoard, currentPlayer);\n  }\n\n  checkBoard = (board, currentPlayer) => {\n    let row = this.checkWinByRow(board, currentPlayer);\n    let column = this.checkWinByColumn(board, currentPlayer);\n    let diagonal = this.checkWinByDiagonals(board, currentPlayer);\n    console.log({ row, column, diagonal });\n    return row || column || diagonal;\n  }\n\n  render() {\n    let { boardData, gameMessage, currentPlayer,playWinAnimation } = this.state;\n    let player = currentPlayer === User.HUMAN ? 'human' : 'computer';\n    let currentPlayerDescription = currentPlayer === User.HUMAN ? 'Player 1' : 'Player 2';\n    return (\n      <div className=\"App\">\n        { playWinAnimation \n          ? <WinAnimation currentPlayer={currentPlayer} />\n          : <h1 className={`game-message player--${player}`}>\n              {`${currentPlayerDescription}, ${gameMessage}.`}\n            </h1>\n        }\n        <Board boardPlay={this.boardPlay} boardData={boardData} />\n        <button\n          type='button'\n          className='reset-btn'\n          onClick={() => this.resetGame()}\n        >\n          Reset Game\n        </button>\n      </div>\n    );\n  }\n}\n\nconst WinAnimation = ({currentPlayer}) => {\n  let player = currentPlayer === User.HUMAN ? 'human' : 'computer';\n  let playerDescription = currentPlayer === User.HUMAN ? 'Player 1' : 'Player 2';\n  return (\n    <div className='game-win'>\n      <div className={`coin--${player}`} />\n      <div className={`coin--${player}-border`} />\n      <div className={`game-win--text game-message player--${player}`}>\n        {playerDescription} Wins!\n      </div>\n    </div> \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}